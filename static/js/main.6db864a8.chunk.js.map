{"version":3,"sources":["components/Navbar/Navbar.js","components/TaskItem/TaskItem.js","components/TaskList/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","TaskItem","id","title","taskState","onTaskUpdate","useState","isEditing","setIsEditing","editableTitle","setEditableTitle","type","value","onChange","event","newTitle","target","onKeyPress","key","onClick","e","TaskList","onAddTask","tasks","map","task","state","idAcc","App","setTasks","addTask","newTask","existingTasks","updateTask","console","log","filter","t","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6db864a8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <span>React Kanban</span>\n    </nav>\n  );\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./taskitem.css\";\n\nexport default function TaskItem({ id, title, taskState, onTaskUpdate }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editableTitle, setEditableTitle] = useState(title);\n\n  const onTitleChange = (event) => {\n    const newTitle = event.target.value;\n    setEditableTitle(newTitle);\n    onTaskUpdate(id, newTitle, taskState);\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      setIsEditing(false);\n      }\n  }\n\n  const onTaskStateChange = (event) => {\n    onTaskUpdate(id, title, event.target.value);\n  };\n  \n  if (isEditing) {\n    return (\n      <input\n        type=\"text\"\n        value={editableTitle}\n        onChange={onTitleChange}\n        onKeyPress={onKeyPress}\n      />\n    );\n  } else {\n    return (\n      <div>\n        <div onClick={(e) => setIsEditing(true)}>{editableTitle}</div>\n        <select onChange={onTaskStateChange} value={taskState}>\n          <option value=\"Pendente\">Pendente</option>\n          <option value=\"Fazendo\">Fazendo</option>\n          <option value=\"Completa\">Completa</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nTaskItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  taskState: PropTypes.string.isRequired,\n};","import React from \"react\";\nimport \"./tasklist.css\";\nimport PropTypes from \"prop-types\";\nimport TaskItem from \"../TaskItem/TaskItem\";\n\nexport default function TaskList({ \n  title, \n  taskState, \n  onAddTask, \n  tasks, \n  onTaskUpdate \n  }) {\n  \n  const addTask = () => {\n    onAddTask(\"Nova Tarefa\", taskState);\n  };\n  \n  return (\n    <div className=\"tasklist\">\n      <div className=\"title\">{title}\n        <div className=\"content\">\n        { tasks.map((task) => (\n          <TaskItem\n          key={task.id}\n          id={task.id}\n          title={task.title}\n          taskState={task.state}\n          onTaskUpdate={onTaskUpdate}\n        />\n        ))}\n        </div>\n        <button onClick={addTask}>Adicionar nova tarefa</button>\n      </div> \n    </div>\n  )\n}\n\nTaskList.propTypes = {\n  title: PropTypes.string.isRequired,\n  onAddTask: PropTypes.func.isRequired,\n  tasks: PropTypes.array.isRequired,\n};\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\n// Teste\nimport Navbar from \"./components/Navbar/Navbar\";\nimport TaskList from \"./components/TaskList/TaskList\";\n\nlet idAcc = 0;\nconst generateId = () => {\n  idAcc = idAcc + 1;\n  return idAcc;\n};\n\nexport default function App() {\n  const [tasks, setTasks] = useState([]);\n\n  const addTask = (title, state) => {\n    const newTask = {\n      id: generateId(),\n      title,\n      state\n    };\n    setTasks((existingTasks) => {\n      return [...existingTasks, newTask];\n    });\n  };\n\n  const updateTask = (id, title, state) => {\n    console.log('hello');\n    setTasks((existingTasks) => {\n      return existingTasks.map((task) => {\n        if (task.id === id) {\n          return { ...task, title, state };\n        } else {\n          return task;\n        }\n      });\n    });\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      <div>\n        <Navbar />\n        <div className=\"container\">\n          <TaskList \n            title=\"Pendente\" \n            onAddTask={addTask}\n            taskState=\"Pendente\"\n            tasks={tasks.filter((t) => t.state === \"Pendente\")}\n            onTaskUpdate={updateTask}\n          />\n          <TaskList \n            title=\"Fazendo\" \n            onAddTask={addTask}\n            taskState=\"Fazendo\"\n            tasks={tasks.filter((t) => t.state === \"Fazendo\")}\n            onTaskUpdate={updateTask}\n          />\n          <TaskList \n            title=\"Completa\" \n            onAddTask={addTask}\n            taskState=\"Completa\"\n            tasks={tasks.filter((t) => t.state === \"Completa\")}\n            onTaskUpdate={updateTask}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}